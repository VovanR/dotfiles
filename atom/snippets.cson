# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson



# PHP
'.text.php':
  'Div':
    'prefix': 'di'
    'body': """
      <!-- begin $1 -->
      <div class="$1">
          $0
      </div>
      <!-- end $1 -->
      """
  'Block':
    'prefix': 'bl'
    'body': """
      <!-- begin $1 -->
      <!-- end $1 -->
      """



# TypeScript
'.source.ts':
  'component':
    'prefix': 'component'
    'body': """
        import React from 'lib/react';

        interface $1Props extends React.Props<any> {
        }
        export default class $1 extends React.Component<$1Props, any> {
            render() {
                return (
                    <div>
                        ${1:ClassName}
                    </div>
                );
            }
        }
      """

  'console log':
    'prefix': 'cl'
    'body': 'console.log($1);'

  'console warn':
    'prefix': 'cw'
    'body': 'console.warn($1);'

  'console error':
    'prefix': 'ce'
    'body': 'console.error($1);'

  'console info':
    'prefix': 'ci'
    'body': 'console.info($1);'

  'console dir':
    'prefix': 'cd'
    'body': 'console.dir($1);'

  'import':
    'prefix': 'imp'
    'body': 'import ${1} from \'${2}\';'

  'map collection in JSX':
    'prefix': 'mapx'
    'body': """
      {this.props.collection.map(model => {
        return (
          <${1:div}
            key={model.id}
          />
        );
      })}
      """

  'preventDefault':
    'prefix': 'prevent'
    'body': 'e.preventDefault();'

  'stopPropagation':
    'prefix': 'stop'
    'body': 'e.stopPropagation();'

  'constructor':
    'prefix': 'constr'
    'body': """
      constructor(${1}) {
        super(${1:props});
        ${0}
      }
      """

  'JSX if':
    'prefix': 'ifx'
    'body': """
      {${1} ? (
        ${0}
      ) : null}
      """

  'JSX ife':
    'prefix': 'ifex'
    'body': """
      {${1} ? (
        ${2}
      ) : (
        ${0}
      )}
      """

  'stateless':
    'prefix': 'stateless'
    'body': """
      import React from 'lib/react';

      let $1 = (props) => (
        <div>
          ${1:ClassName}
        </div>
      );

      // $1.propTypes = {};
      // $1.defaultProps = {};

      export default $1;
      """

  'setstate':
    'prefix': 'setstate'
    'body': 'this.setState({$0})'
