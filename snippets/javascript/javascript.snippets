# Source: https://github.com/shuvalov-anton/vim-snippets/blob/master/snippets/javascript.snippets
snippet timeoutc
setTimeout(function (that) {${0}
}, ${1}, this);
endsnippet

snippet timeout
setTimeout(function () {${0}
}, ${1});
endsnippet

snippet intervalc
setInterval(function (that) {${0}
}, ${1}, this);
endsnippet

snippet interval
setInterval(function () {${0}
}, ${1});
endsnippet

snippet cl
console.log(${0});
endsnippet

snippet cw
console.warn(${0});
endsnippet

snippet ce
console.error(${0});
endsnippet

snippet ci
console.info(${0});
endsnippet

snippet cd
console.dir(${0});
endsnippet

snippet method
${1}: function (${0}) {
},
endsnippet

snippet req
require('${0}');
endsnippet

snippet proto
${1}.prototype.${2} = function (${0}) {
};
endsnippet

snippet f
function ${1}(${0}) {
}
endsnippet

snippet :f
${1}: function (${0}) {
}${2:,}
endsnippet

snippet fn
function ${1} (${0}) {
};
endsnippet

snippet sf
(function () {${0}
}());
endsnippet

snippet g
function * (${0}) {
}
endsnippet

snippet :g
${1}: function * (${0}) {
}${2:,}
endsnippet

snippet gn
function *${1} (${0}) {
}
endsnippet

snippet if
if (${0}) {
}
endsnippet

snippet ife
if (${0}) {
} else {
}
endsnippet

snippet ifei
if (${0}) {
} else if () {
} else {
}
endsnippet

snippet ?
${1} ? ${2} : ${0};
endsnippet

snippet aclick
${0}.on('click', function (e) {
	e.preventDefault();
});
endsnippet

snippet prevent
e.preventDefault();
endsnippet

snippet stop
e.stopPropagation();
endsnippet

snippet constructor
constructor($1) {
	super(${1:props});${0}
}
endsnippet

snippet ifx
{${0} ? (
) : null}
endsnippet

snippet ifxf
{${0} ? null : (
)}
endsnippet

snippet ifex
{${0} ? (
) : (
)}
endsnippet

snippet imp
import ${1} from '${0}';
endsnippet

snippet mapx
{${1}.map(${2:item} => {${0}
	return (
		<div
			key={$2.id}
			/>
	);
})}
endsnippet

snippet stateless
const $1 = props => (${0}
	<div>
		${1}
	</div>
);
// $1.propTypes = {};
// $1.defaultProps = {};

export default $1;
endsnippet

snippet component
class ${1} extends React.Component {${0}
	constructor(props) {
		super(props);
		this.state = {};
	}

	render() {
		return (
			<div className="">
			</div>
		);
	}
}
$1.propTypes = {
};
$1.defaultProps = {
};

export default $1;
endsnippet

snippet reactcomponent
const ${1} = React.createClass({${0}
	propTypes: {
	},

	getDefaultProps() {
		return {};
	},

	getInitialState() {
		return {};
	},

	render() {
		return (
			<div className="">
			</div>
		);
	}
});

export default $1;
endsnippet

snippet rpt
React.PropTypes.
endsnippet
snippet rpta
React.PropTypes.array
endsnippet
snippet rptb
React.PropTypes.bool
endsnippet
snippet rptf
React.PropTypes.func
endsnippet
snippet rptn
React.PropTypes.number
endsnippet
snippet rpto
React.PropTypes.object
endsnippet
snippet rpts
React.PropTypes.string
endsnippet
snippet rptoo
React.PropTypes.oneOfType([
	React.PropTypes.string,
	React.PropTypes.number
])
endsnippet
snippet rptno
React.PropTypes.node
endsnippet

snippet div
<div className="${0}">
</div>
endsnippet

snippet span
<span className="${0}">
</span>
endsnippet

snippet bl
<${1} className="${0}">
</$1>
endsnippet

snippet handle
this.handle$1 = this.handle$1.bind(this);
handle$1() {
}
on${0}={this.handle${1}}
endsnippet

snippet switch
switch (${1}) {
	case ${0}: {
		break;
	}
	default: {
		break;
	}
}
endsnippet

snippet try
try {${0}
} catch (err) {
}
endsnippet
